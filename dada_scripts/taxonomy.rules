taxConts = ["sequenceTables/all.seqTab.tsv","sequenceTables/all.seqTab.RDS"]
if config['taxonomy']['decipher']['do'] or config['taxonomy']['mothur']['do']:
    taxConts.append("sequenceTables/all.seqTab.tax.tsv")
if config['taxonomy']['blast']['do']:
    taxConts.append("sequenceTables/blast_results.tsv")
if config['hand_off']['phyloseq'] and not config['do_postprocessing']:
    taxConts.append("sequenceTables/all.seqTab.phyloseq.RDS")

rule taxonomy_control:
    input:
        taxConts
    output:
        "taxonomy.done"
    threads: 1
    params:
        runtime="00:10:00",
        mem="8G"
    shell:
        """
        touch {output}
        """

taxTabs = ["sequenceTables/all.seqTab.RDS"]
if config['taxonomy']['decipher']['do']:
    taxTabs.append("sequenceTables/tax.decipher.RDS")
if config['taxonomy']['mothur']['do']:
    taxTabs.append("sequenceTables/tax.mothur.tsv")

rule taxonomy_to_OTUtab:
    input:
        taxTabs
    output:
        "sequenceTables/all.seqTab.tax.tsv",
        "sequenceTables/all.seqTab.tax.RDS"
    threads: 1
    params:
        mem="8G",
        runtime="36:00:00"
    conda: "dada_env_test.yml"
    log: "logs/taxonomy.log"
    message: "Combining taxa and OTU tables {input}."
    script:
        "{config[dada_src]}/add_taxonomy.R"

if config['taxonomy']['decipher']['post_ITSx']:
    rule decipher_taxonomy:
        input:
            "sequenceTables/ITSx.seqs.fasta"
        output:
            "sequenceTables/tax.decipher.tsv",
            "sequenceTables/tax.decipher.RDS"
        threads: 1
        params:
            mem="8G",
            runtime="36:00:00"
        conda: "dada_env_test.yml"
        log: "logs/decipher_taxonomy.log"
        message: "Running decipher on {input}."
        script:
            "{config[dada_src]}/decipher_ID.R"
else:
    rule decipher_taxonomy:
        input:
            "sequenceTables/all.seqs.fasta"
        output:
            "sequenceTables/tax.decipher.tsv", 
            "sequenceTables/tax.decipher.RDS"
        threads: 1
        params:
            mem="8G",
            runtime="36:00:00"
        conda: "dada_env_test.yml"
        log: "logs/decipher_taxonomy.log"
        message: "Running decipher on {input}."
        script:
            "{config[dada_src]}/decipher_ID.R"

if config['taxonomy']['mothur']['post_ITSx']:
    rule mothur_taxonomy:
        input:
            "sequenceTables/ITSx.seqs.fasta"
        output:
            "sequenceTables/tax.mothur.tsv"
        threads: 6
        params:
            mem="8G",
            runtime="12:00:00"
        conda: "dada_env_test.yml"
        log: "logs/mothur_taxonomy.log"
        message: "Running mothur classifier on {input}."
        shell:
            """
            mothur "#set.dir(tempdefault={config[taxonomy][mothur][db_path]});
            classify.seqs(fasta={input}, template={config[taxonomy][mothur][tax_db]}.fasta, taxonomy={config[taxonomy][mothur][tax_db]}.taxonomy, cutoff={config[taxonomy][mothur][cutoff]}, method=wang, processors={threads})"
            """
else:
    rule mothur_taxonomy:
        input:
            "sequenceTables/all.seqs.fasta"
        output:
            "sequenceTables/tax.mothur.tsv"
        threads: 1
        params:
            mem="30G,highmem",
            runtime="12:00:00",
            outBase="sequenceTables/all.seqs"
        conda: "dada_env_test.yml"
        log: "logs/mothur_taxonomy.log"
        message: "Running mothur classifier on {input}."
        shell:
            """
            mothur "#set.dir(tempdefault={config[taxonomy][mothur][db_path]});
            classify.seqs(fasta={input}, template={config[taxonomy][mothur][tax_db]}.fasta, taxonomy={config[taxonomy][mothur][tax_db]}.taxonomy, cutoff={config[taxonomy][mothur][cutoff]}, method=wang, processors={threads})"
            mv {params[outBase]}.*.wang.taxonomy {output}
            """

if config['ITSx']['do']:
    rule ITSx:
        input:
            "sequenceTables/all.seqs.fasta"
        output:
            directory("sequenceTables/ITSx_out"),
            "sequenceTables/ITSx.seqs.fasta"
        threads: 12
        params:
            mem="8G",
            runtime="48:00:00"
        log: "logs/ITSx.log"
        conda: "dada_env_test.yml"
        message: "Running ITSx on {input}."
        shell:
            """
            export PERL5LIB={config[dada_lib]}/site_perl/5.26.2/x86_64-linux-thread-multi:$PERL5LIB
            ITSx -i {input} --cpu {threads} --detailed_results T --save_regions {config[ITSx][region]} --graphical F \
            -o {output[0]}/ITSx -N {config[ITSx][min_regions]} -E {config[ITSx][e_val]}
            grep '|F|{config[ITSx][region]}' -A 1 --no-group-separator {output[0]}/ITSx.{config[ITSx][region]}.fasta | sed 's/|.*//' > {output[1]}
            """

if config['taxonomy']['blast']['do']:
    rule prepare_blastn:
        input:
            expand("sequenceTables/all.seqTab.{tax}RDS",tax="tax." if config['taxonomy']['decipher']['do'] or config['taxonomy']['mothur']['do'] else "")
        output:
            "sequenceTables/no_anno.seqs.fasta"
        threads: 1
        params:
            mem="8G",
            runtime="2:00:00"
        log: "logs/prep_blastn.log"
        conda: "dada_env_test.yml"
        message: "Preparing blast: extracting un-annotated sequences."
        script:
            "{config[dada_src]}/prepare_blastn.R"
    if config['taxonomy']['blast']['tax2id'] == "none":
        rule blastn:
            input:
                "sequenceTables/no_anno.seqs.fasta"
            output:
                "sequenceTables/blast_results.tsv"
            threads: 6
            params:
                mem="8G",
                runtime="48:00:00"
            log: "logs/blastn.log"
            conda: "dada_env_test.yml"
            message: "Running blastn on {input}."
            shell:
                """
                blastn -db {config[taxonomy][blast][db_path]}/{config[taxonomy][blast][tax_db]} \
                 -query {input} -outfmt 7 -out {output} -max_target_seqs 10
                """
    else:
        rule blastn:
            input:
                "sequenceTables/no_anno.seqs.fasta"
            output:
                "sequenceTables/blast_results.tsv"
            threads: 2
            params:
                mem="30G,highmem",
                runtime="48:00:00"
            log: "logs/blastn.log"
            conda: "dada_env_test.yml"
            message: "Running blastn on {input}."
            shell:
                """
                export BLASTDB={config[taxonomy][blast][db_path]}
                blastn -query {input} -db {config[taxonomy][blast][db_path]}/{config[taxonomy][blast][tax_db]} \
                 -out sequenceTables/blast_output.{config[taxonomy][blast][tax_db]}.tsv \
                 -evalue {config[taxonomy][blast][e_val]} -max_target_seqs 10 \
                 -outfmt '6 qseqid sseqid pident length mismatch gapopen qstart qend evalue bitscore sgi sacc staxids ssciname scomnames stitle'
                awk -F $"\\t" '{{if (NR==FNR) {{val[$13] = $0; next}} if($1 in val){{print val[$1]"\\t"$0}}}}' \
                 sequenceTables/blast_output.{config[taxonomy][blast][tax_db]}.tsv {config[taxonomy][blast][tax2id]} >> {output}
                """

if config['hand_off']['biom']:
    rule biom_handoff:
        input:
            "sequenceTables/all.seqTab.tax.RDS",
            "reporting/finalNumbers_perSample.tsv"
        output:
            "sequenceTables/all.seqTab.biom"
        threads: 1
        params:
            currentStep = "taxonomy",
            mem="8G",
            runtime="12:00:00"
        conda: "dada_env_test.yml"
        log: "logs/biom_hand-off.log"
        script:
            "{config[dada_src]}/biom_handoff.R"

if config['hand_off']['phyloseq'] and (config['taxonomy']['decipher']['do'] or config['taxonomy']['mothur']['do']) and not config['do_postprocessing']:
    rule phyloseq_handoff:
        input:
            "sequenceTables/all.seqTab.tax.RDS",
            "reporting/finalNumbers_perSample.tsv"
        output:
            "sequenceTables/all.seqTab.phyloseq.RDS"
        threads: 1
        params:
            currentStep = "taxonomy",
            mem="8G",
            runtime="12:00:00"
        conda: "dada_env_test.yml"
        log: "logs/phyloseq_hand-off.log"
        script:
            "{config[dada_src]}/phyloseq_handoff.R"



