postConts = []
if config['post']['hand_off']['phyloseq']
    if config['final_table_filtering']['do']:
        postConts.append("post/filtered.seqTab.phyloseq.RDS")
    else:
        postConts.append("sequenceTables/all.seqTab.phyloseq.RDS")
if config['final_table_filtering']['do']:
    postConts.append("post/filtered.seqTab.RDS")
if config['postprocessing']['treeing']:
    postConts.append("post/tree.newick")
if config['postprocessing']['rarecurve']:
    postConts.append("reporting/rarefaction_curves.pdf")

rule post_control:
    input:
        postConts
    output:
        "postprocessing.done"
    threads: 1
    params:
        runtime="00:10:00",
        mem="8G"
    shell:
        """
        touch {output}
        """

if config['final_table_filtering']['do']:
    filtTabs = ["sequenceTables/all.seqs.fasta"]]
    if config['do_taxonomy'] and (config['taxonomy']['decipher']['do'] or config['taxonomy']['mothur']['do']):
        filtTabs.append("sequenceTables/all.seqTab.tax.RDS")
    else:
        filtTabs.append("sequenceTables/all.seqTab.RDS")
    rule filtering_table:
        input:
            filtTabs
        output:
            "post/filtered.seqTab.RDS",
            "post/filtered.seqTab.tsv",
            "post/filtered.seqs.fasta" 
        threads: 1
        params:
            mem="8G",
            runtime="2:00:00"
        log: "logs/post_filtering_table.log"
        conda: "dada_env_test.yml"
        script:
            "{config[dada_src]}/post_filtering.R"

rule guilds:
    input:
        "sequenceTables/all.OTUs.tax.seq.tsv"
    output:
        "post/all.OTUs.tax.seq.guilds.tsv"
    threads: 1
    params:
        mem="8G",
        runtime="12:00:00"
    log: "logs/funguild.log"
    conda: "dada_env_test.yml"
    message: "Running funguild on {input}."
    shell:
        """
        {config[dada_root]}/dada_scripts/Guilds_v1.1.local.2.py -otu {input} -output {output} -path_to_db {config[Funguild_DB]} &> {log}
        """

rule fapro:
    input:
        "sequenceTables/all.OTUs.tax.seq.tsv"
    output:
        temp("post/fapro.tsv"),
        "post/all.OTUs.tax.seq.fapro.tsv"
    threads: 1
    params:
        mem="8G",
        runtime="12:00:00", 
        sub=7 if config['taxonomy']['look_for_species'] else 6
    log: "logs/faprotax.log"
    conda: "dada_env_test.yml"
    message: "Running faprotax on {input}."
    shell:
        """
        NCOL=$((`awk '{{print NF}}' {input} | sort -nu | tail -n 1` -1))
        ICOL=$((NCOL-{params.sub}))
        IGCOLS=`eval echo {{$ICOL..$NCOL}} | sed 's/ /,/g'`
        {config[dada_root]}/dada_scripts/collapse_table.py -i {input} \
         --omit_unrepresented_groups --out_groups2records_table {output[0]} -g {config[Faprotax_DB]}\
         -d taxonomy --column_names_are_in first_data_line --omit_columns 0,$IGCOLS
        paste {input} <(awk '{{if($1 !~ /^#/){{if($1 ~ /^record$/) {{for (i = 2; i <= NF; ++i) {{a[i]=$i}};\
         print "FAPROTAX"}}else {{ b = "";\
         for (i = 2; i <= NF; ++i) {{if($i == "1") {{b = b a[i] ";" }}}};\
         print b}}}}}}' {output[0]}) >> {output[1]}
        """

if config['hand_off']['phyloseq']:
    physInputs = []
    if config['final_table_filtering']['do']:
        physInputs.append("post/filtered.seqTab.RDS")
        physInputs.append("reporting/post_finalNumbers_perSample.tsv")
        physOutputs = "post/filtered.seqTab.phyloseq.RDS"
    else:
        physInputs.append("sequenceTables/all.seqTab.RDS")
        physInputs.append("reporting/finalNumbers_perSample.tsv")
        physOutputs = "sequenceTables/all.seqTab.phyloseq.RDS"
    if config['postprocessing']['treeing']:
        "post/tree.newick"
    rule phyloseq_handoff_post:
        input:
            physInputs
        output:
            physOutputs
        threads: 1
        params:
            currentStep = "post",
            mem="8G",
            runtime="12:00:00"
        conda: "dada_env_test.yml"
        log: "logs/phyloseq_hand-off.log"
        script:
            "{config[dada_src]}/phyloseq_handoff.R"


rule treeing:
    input:




#rule panFP:

#rule pieCrust:

#tax4fun

#label non-target, non-ITSx, 

#if config['keep_target_taxa'] == ".":
