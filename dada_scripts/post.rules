rule post_control:
    input:
        "sequenceTables/all.seqTab.RDS",
        "sequenceTables/all.seqs.fasta",
        expand("stats/QC_{step}.{run}.{direction}.pdf",step=['1','filtered'],direction=['fwd','rvs'],run=samples.run.unique())
    output:
        "post_processing.done"
    shell:
        """
        touch {output}
        """


rule ITSx:
    input:
        "sequenceTables/all.seqs.fasta"
    output:
        directory("post/ITSx_out"),
        expand("post/all.seqs.{region}.fungi.fasta",region={config['ITSx']['region']})
    threads: 1
    log: "logs/ITSx.log"
    message: "Running ITSx on {input}."
    shell:
        """
        {config[dada_root]}/dada_scripts/runITSx.q.p.sh -t post -n {config[ITSx][min_regions]} -i {config[ITSx][region]} -e {config[ITSx][e_val]} -d {input} &> {log}
        """

rule guilds:
    input:
        "sequenceTables/all.OTUs.tax.seq.tsv"
    output:
        "post/all.OTUs.tax.seq.guilds.tsv"
    threads: 1
    log: "logs/funguild.log"
    message: "Running funguild on {input}."
    shell:
        """
        {config[dada_root]}/dada_scripts/Guilds_v1.1.local.2.py -otu {input} &> {log}
        """

rule fapro:
    input:
        "sequenceTables/all.OTUs.tax.seq.tsv"
    output:
        temp("post/fapro.tsv"),
        "post/all.OTUs.tax.seq.tsv"
    threads: 1
    log: "logs/faprotax.log"
    message: "Running faprotax on {input}."
    shell:
        """
        NCOL=$((`awk '{{print NF}}' {input} | sort -nu | tail -n 1` -1))
        {config[dada_root]}/dada_scripts/collapse_table.py -i {input} \
         --omit_unrepresented_groups --out_groups2records_table {output[0]} -g {config[Faprotax_DB]}\
         -d taxonomy --column_names_are_in first_data_line --omit_columns 0,$NCOL
        paste {input} <(awk '{{if($1 !~ /^#/){{if($1 ~ /^record$/) {for (i = 2; i <= NF; ++i) {{a[i]=$i}};\
         print "FAPROTAX"}}else {{ b = "";\
         for (i = 2; i <= NF; ++i) {{if($i == "1") {{b = b a[i] ";" }}}};\
         print b}}}}}}' {output[0]}) >> {output[1]}
        """

#rule panFP:

#rule pieCrust:

#tax4fun

#label non-target, non-ITSx, 

#if config['keep_target_taxa'] == ".":
