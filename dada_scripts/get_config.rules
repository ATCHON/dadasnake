import os
import shutil
import gzip
import yaml
#import bz2
from copy import deepcopy
import subprocess
import pandas as pd
from snakemake.utils import validate

def dict_merge(a, b):
    """
    Deep merge 2 dicts together
    """
    if not isinstance(b, dict):
        return b
    result = deepcopy(a)
    for k, v in b.items():
        if k in result and isinstance(result[k], dict):
            result[k] = dict_merge(result[k], v)
        else:
            result[k] = deepcopy(v)
    return result


# default configuration file
#configfile: "config.default.yaml"
# validate(config,schema="schemas/config.schema.yaml")

# default executable for snakemake
shell.executable("bash")

# custom configuration file
CUSTOM_CONFIG_PATH = os.environ.get("CONFIGFILE")
print("read configuration from "+CUSTOM_CONFIG_PATH)

# merge 2 configurations files together
if os.path.exists(CUSTOM_CONFIG_PATH):
    with open(CUSTOM_CONFIG_PATH, 'r') as rhandle:
        data = yaml.load(rhandle)
        config = dict_merge(config, data)

#validate(config,schema="schemas/config.schema.yaml")

samples = pd.read_table(os.path.expandvars(config['sample_table']))
if 'run' not in samples.columns:
    samples['run'] = ["run1"] * samples.shape[0]
    print("adding column with run info")
samples = samples.set_index(["library","run"],drop=False)
samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels]) 
samples['run'] = samples['run'].astype(str)
samples['library'] = samples['library'].astype(str)
if 'sample' not in samples.columns:
    samples['sample'] = samples['library']
    print("adding column with sample names based on library names")
else:
    samples['sample'] = samples['sample'].astype(str)
print(samples)

#validate(samples, schema="schemas/sample.schema.yaml")

# get parameters from the command line
OUTPUTDIR = os.environ.get("OUTPUTDIR", os.path.expandvars(config['outputdir']))

PRELIM_STEPS = ''
if config['do_primers']:
    PRELIM_STEPS += "primers "
if config['do_dada']:
    PRELIM_STEPS += "dada "
    if config['do_taxonomy']:
        PRELIM_STEPS += "taxonomy "
    if config['do_postprocessing']:
        PRELIM_STEPS += "postprocessing "

STEPS = os.environ.get("STEPS", PRELIM_STEPS).split()

# temporary directory will be stored inside the OUTPUTDIR directory
# unless an absolute path is set
TMPDIR = os.path.expandvars(os.environ.get("TMPDIR", config['tmp_dir']))
if not os.path.isabs(TMPDIR):
    TMPDIR = os.path.join(OUTPUTDIR, TMPDIR)
if not os.path.exists(TMPDIR):
    os.makedirs(TMPDIR)


