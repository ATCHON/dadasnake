def get_fastq(wildcards):
    #print(config['raw_directory']+"/"+samples.loc[(wildcards.library,wildcards.run), ["r1_file", "r2_file"]].dropna())
    return config['raw_directory']+"/"+samples.loc[(wildcards.library,wildcards.run), ["r1_file", "r2_file"]].dropna()

rule primers_control:
    input:
        expand("preprocessing/{samples.run}/{samples.library}.{direction}.fastq", samples=samples.itertuples(), direction=["fwd","rvs"])
    output:
        "primers.done"
    shell:
        """
        touch {output}
        """

rule cut_primers_both:
    input:
        get_fastq
    output:
        "preprocessing/{run}/{library}.fwd.fastq",
        "preprocessing/{run}/{library}.rvs.fastq"
    threads: 1
    log: "logs/cutadapt.{run}.{library}.log"
    message: "Running cutadapt on {input}."
    run:
        if config['sequencing_direction'] == "fwd_1":
            shell("""
                TMPD=$(mktemp -d -t --tmpdir={TMPDIR} "XXXXXX")

                FWD_RC=`echo {config['primers']['fwd']['sequence']} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TAACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`
                RVS_RC=`echo {config['primers']['rvs']['sequence']} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TAACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`
                
                cutadapt -g {config['primers']['fwd']['sequence']} -G {config['primers']['rvs']['sequence']} \
                 --no-indels -n {config['primer_cutting']['count']} -O {config['primer_cutting']['overlap']} \
                 --match-read-wildcards -m 1:1 --pair-filter {config['primer_cutting']['match']} \
                 -j {threads} -e {config['primer_cutting']['perc_mismatch']} --trimmed-only \
                 -o $TMPD/{wildcards.SAMPLE}.fwd.fastq -p $TMPD/{wildcards.SAMPLE}.rvs.fastq {input} 2> {log}

                cutadapt -a $RVS_RC -A $FWD_RC \
                 --no-indels -n {config['primer_cutting']['count']} \
                 --match-read-wildcards -m 1:1 \
                 -j {threads} -e {config['primer_cutting']['perc_mismatch']} \
                 -o {output[0]} -p {output[1]} $TMPD/{wildcards.SAMPLE}.fwd.fastq $TMPD/{wildcards.SAMPLE}.rvs.fastq 2>> {log}
                  """)
            print("Assuming forward primer is in read 1.")

        elif config['sequencing_direction'] == "rvs_1":
            shell("""
                TMPD=$(mktemp -d -t --tmpdir={TMPDIR} "XXXXXX")

                FWD_RC=`echo {config['primers']['fwd']['sequence']} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TAACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`
                RVS_RC=`echo {config['primers']['rvs']['sequence']} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TAACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`

                cutadapt -g {config['primers']['rvs']['sequence']} -G {config['primers']['fwd']['sequence']} \
                 --no-indels -n {config['primer_cutting']['count']} -O {config['primer_cutting']['overlap']} \
                 --match-read-wildcards -m 1:1 --pair-filter {config['primer_cutting']['match']} \
                 -j {threads} -e {config['primer_cutting']['perc_mismatch']} --trimmed-only \
                 -o $TMPD/{wildcards.SAMPLE}.rvs.fastq -p $TMPD/{wildcards.SAMPLE}.fwd.fastq {input} 2> {log}

                cutadapt -a $RVS_RC -A $FWD_RC \
                 --no-indels -n {config['primer_cutting']['count']} \
                 --match-read-wildcards -m 1:1 \
                 -j {threads} -e {config['primer_cutting']['perc_mismatch']} \
                 -o {output[0]} -p {output[1]} $TMPD/{wildcards.SAMPLE}.fwd.fastq $TMPD/{wildcards.SAMPLE}.rvs.fastq 2>> {log}                
                  """)
            print("Assuming forward primer is in read 2.")

        else:
            shell("""
                TMPD=$(mktemp -d -t --tmpdir={TMPDIR} "XXXXXX")

                FWD_RC=`echo {config['primers']['fwd']['sequence']} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TAACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`
                RVS_RC=`echo {config['primers']['rvs']['sequence']} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TAACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`

                cutadapt -g {config['primers']['fwd']['sequence']} -G {config['primers']['rvs']['sequence']} \
                 --no-indels -n {config['primer_cutting']['count']} -O {config['primer_cutting']['overlap']} \
                 --match-read-wildcards -m 1:1 --pair-filter {config['primer_cutting']['match']} \
                 -j {threads} -e {config['primer_cutting']['perc_mismatch']} \
                 --untrimmed-output=$TMPD/{wildcards.SAMPLE}.fwd_unt.fastq --untrimmed-paired-output=$TMPD/{wildcards.SAMPLE}.rvs_unt.fastq \
                 -o $TMPD/{wildcards.SAMPLE}.fwd.fastq -p $TMPD/{wildcards.SAMPLE}.rvs.fastq {input} 2> {log}

                cutadapt -a $RVS_RC -A $FWD_RC \
                 --no-indels -n {config['primer_cutting']['count']} \
                 --match-read-wildcards -m 1:1 \
                 -j {threads} -e {config['primer_cutting']['perc_mismatch']} \
                 -o {output[0]} -p {output[1]} $TMPD/{wildcards.SAMPLE}.fwd.fastq $TMPD/{wildcards.SAMPLE}.rvs.fastq 2>> {log}

                cutadapt -g {config['primers']['rvs']['sequence']} -G {config['primers']['fwd']['sequence']} \
                 --no-indels -n {config['primer_cutting']['count']} -O {config['primer_cutting']['overlap']} \
                 --match-read-wildcards -m 1:1 --pair-filter {config['primer_cutting']['match']} \
                 -j {threads} -e {config['primer_cutting']['perc_mismatch']} --trimmed-only \
                 -o $TMPD/{wildcards.SAMPLE}.rvs_tr2.fastq -p $TMPD/{wildcards.SAMPLE}.fwd_tr2.fastq \
                 $TMPD/{wildcards.SAMPLE}.fwd_unt.fastq $TMPD/{wildcards.SAMPLE}.rvs_unt.fastq 2>> {log}

                cutadapt -a $RVS_RC -A $FWD_RC \
                 --no-indels -n {config['primer_cutting']['count']} \   
                 --match-read-wildcards -m 1:1 \
                 -j {threads} -e {config['primer_cutting']['perc_mismatch']} \
                 -o $TMPD/{wildcards.SAMPLE}.fwd.final.fastq -p $TMPD/{wildcards.SAMPLE}.rvs.final.fastq \
                 $TMPD/{wildcards.SAMPLE}.fwd_tr2.fastq $TMPD/{wildcards.SAMPLE}.rvs_tr2.fastq 2>> {log}

                cat $TMPD/{wildcards.SAMPLE}.fwd.final.fastq >> {output[0]}
                cat $TMPD/{wildcards.SAMPLE}.rvs.final.fastq >> {output[1]}
                  """)
            print("Checking both reads for all primers.")



