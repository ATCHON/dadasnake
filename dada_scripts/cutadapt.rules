def get_fastq(wildcards):
    return config['raw_directory']+"/"+samples.loc[(wildcards.library,wildcards.run), ["r1_file", "r2_file"]].dropna()

def get_lib_perRunAndSample(wildcards,prefix,suffix):
    return prefix+samples.loc[(samples['run']==wildcards.run) & (samples['sample']==wildcards.sample), "library"].unique()+suffix

#ruleorder: cut_primer_both > combine_or_rename 

rule primers_control:
    input:
        expand("preprocessing/{samples.run}/{samples.sample}.{direction}.fastq", samples=samples.itertuples(), direction=["fwd","rvs"]),
        "reporting/readNumbers.tsv",
        "reporting/primerNumbers_perSample.tsv"
    output:
        "primers.done"
    threads: 1
    params:
        runtime="00:10:00",
        mem="8G"
    shell:
        """
        touch {output}
        """

rule combine_or_rename:
    input:
        "reporting/primerNumbers_perLibrary.tsv",
        lambda wildcards: get_lib_perRunAndSample(wildcards,"preprocessing/{run}/",".{direction}.fastq")    
    output:
        "preprocessing/{run}/{sample}.{direction}.fastq"
    wildcard_constraints:
        direction="(fwd|rvs)",
        sample='|'.join(samples['sample'])
    threads: 1
    log: "logs/combine_or_rename.{run}.{sample}.{direction}.log"
    params:
        runtime="01:00:00",
        mem="8G"
    run:
        if len(input) > 2:
            shell("cat {input[1:]} > {output}")
        else:
            shell("cp {input[1]} {output}")

rule input_numbers:
    input:
        "reporting/sample_table.tsv",
        expand("{raw_directory}/{file}", file=samples.r1_file,raw_directory=config['raw_directory']),
        expand("{raw_directory}/{file}", file=samples.r2_file,raw_directory=config['raw_directory'])
    output:
        report("reporting/readNumbers.tsv",category="Reads")
    threads: 1
    params:
        currentStep = "raw",
        runtime="12:00:00",
        mem="8G"
    log: "logs/countInputReads.log"
    script:
        "{config[dada_src]}/report_readNumbers.R" 


rule primer_numbers:
    input:
        "reporting/readNumbers.tsv",
        expand("preprocessing/{samples.run}/{samples.library}.{direction}.fastq", samples=samples.itertuples(), direction=["fwd","rvs"])
    output:
        report("reporting/primerNumbers_perLibrary.tsv",category="Reads"),
        report("reporting/primerNumbers_perSample.tsv",category="Reads")
    threads: 1
    params:
        currentStep = "primers",
        runtime="12:00:00",
        mem="8G"
    log: "logs/countPrimerReads.log"
    script:
        "{config[dada_src]}/report_readNumbers.R"


#script to visualize read numbers -> run once for all steps


if config['sequencing_direction'] == "fwd_1":
    rule cut_primer_both:
        input:
            get_fastq
        output:
            "preprocessing/{run}/{library}.fwd.fastq",
            "preprocessing/{run}/{library}.rvs.fastq"
#        wildcard_constraints:
#            library='|'.join(samples['library'])
        threads: 1
        params:
            runtime="12:00:00",
            mem="8G"
        log: "logs/cutadapt.{run}.{library}.log"
        message: "Running {config[dada_bin]}/cutadapt on {input}. Assuming forward primer is in read 1. {config[primers][fwd][sequence]}"
        shell:
            """
            TMPD=$(mktemp -d -t --tmpdir={TMPDIR} 'XXXXXX') 
            FWD_RC=`echo {config[primers][fwd][sequence]} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`
            RVS_RC=`echo {config[primers][rvs][sequence]} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TAACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`
                
            {config[dada_bin]}/cutadapt -g {config[primers][fwd][sequence]} -G {config[primers][rvs][sequence]} \
            --no-indels -n {config[primer_cutting][count]} -O {config[primer_cutting][overlap]} \
            -m 1:1 --pair-filter={config[primer_cutting][match]} \
            -j {threads} -e {config[primer_cutting][perc_mismatch]} --trimmed-only \
            -o $TMPD/{wildcards.library}.fwd.fastq -p $TMPD/{wildcards.library}.rvs.fastq {input} &> {log}

            {config[dada_bin]}/cutadapt -a $RVS_RC -A $FWD_RC \
             --no-indels -n {config[primer_cutting][count]} \
             -m 1:1 \
             -j {threads} -e {config[primer_cutting][perc_mismatch]} \
             -o {output[0]} -p {output[1]} $TMPD/{wildcards.library}.fwd.fastq $TMPD/{wildcards.library}.rvs.fastq >> {log} 2>&1
             """

elif config['sequencing_direction'] == "rvs_1":
    rule cut_primers_both:
        input:
            get_fastq
        output:
            "preprocessing/{run}/{library}.fwd.fastq",
            "preprocessing/{run}/{library}.rvs.fastq"
        threads: 1
        params:
            runtime="12:00:00",
            mem="8G"
        log: "logs/cutadapt.{run}.{library}.log"
        message: "Running {config[dada_bin]}/cutadapt on {input}. Assuming forward primer is in read 2."
        shell:
            """
            TMPD=$(mktemp -d -t --tmpdir={TMPDIR} "XXXXXX")

            FWD_RC=`echo {config[primers][fwd][sequence]} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TAACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`
            RVS_RC=`echo {config[primers][rvs][sequence]} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TAACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`

            {config[dada_bin]}/cutadapt -g {config[primers][rvs][sequence]} -G {config[primers][fwd][sequence]} \
             --no-indels -n {config[primer_cutting][count]} -O {config[primer_cutting][overlap]} \
              -m 1:1 --pair-filter={config[primer_cutting][match]} \
             -j {threads} -e {config[primer_cutting][perc_mismatch]} --trimmed-only \
             -o $TMPD/{wildcards.library}.rvs.fastq -p $TMPD/{wildcards.library}.fwd.fastq {input} &> {log}

            {config[dada_bin]}/cutadapt -a $RVS_RC -A $FWD_RC \
             --no-indels -n {config[primer_cutting][count]} \
              -m 1:1 \
             -j {threads} -e {config[primer_cutting][perc_mismatch]} \
             -o {output[0]} -p {output[1]} $TMPD/{wildcards.library}.fwd.fastq $TMPD/{wildcards.library}.rvs.fastq >> {log}  2>&1
            """

else:
    rule cut_primers_both:
        input:
            get_fastq
        output:
            "preprocessing/{run}/{library}.fwd.fastq",
            "preprocessing/{run}/{library}.rvs.fastq"
        threads: 1
        params:
            runtime="12:00:00",
            mem="8G"
        log: "logs/cutadapt.{run}.{library}.log"
        message: "Running {config[dada_bin]}/cutadapt on {input}. Searching for both  primers in both reads."
        shell:
            """
            TMPD=$(mktemp -d -t --tmpdir={TMPDIR} "XXXXXX")
            FWD_RC=`echo {config[primers][fwd][sequence]} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TAACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`
            RVS_RC=`echo {config[primers][rvs][sequence]} | tr '[ATUGCYRSWKMBDHNatugcyrswkbdhvn]' '[TAACGRYSWMKVHDBNtaacgryswmkvhdbn]' |rev`

            {config[dada_bin]}/cutadapt -g {config[primers][fwd][sequence]} -G {config[primers][rvs][sequence]} \
             --no-indels -n {config[primer_cutting][count]} -O {config[primer_cutting][overlap]} \
              -m 1:1 --pair-filter={config[primer_cutting][match]} \
             -j {threads} -e {config[primer_cutting][perc_mismatch]} \
             --untrimmed-output=$TMPD/{wildcards.library}.fwd_unt.fastq --untrimmed-paired-output=$TMPD/{wildcards.library}.rvs_unt.fastq \
             -o $TMPD/{wildcards.library}.fwd.fastq -p $TMPD/{wildcards.library}.rvs.fastq {input} &> {log}
            
            {config[dada_bin]}/cutadapt -a $RVS_RC -A $FWD_RC \
             --no-indels -n {config[primer_cutting][count]} \
              -m 1:1 \
             -j {threads} -e {config[primer_cutting][perc_mismatch]} \
             -o {output[0]} -p {output[1]} $TMPD/{wildcards.library}.fwd.fastq $TMPD/{wildcards.library}.rvs.fastq >> {log} 2>&1

            {config[dada_bin]}/cutadapt -g {config[primers][rvs][sequence]} -G {config[primers][fwd][sequence]} \
             --no-indels -n {config[primer_cutting][count]} -O {config[primer_cutting][overlap]} \
              -m 1:1 --pair-filter={config[primer_cutting][match]} \
             -j {threads} -e {config[primer_cutting][perc_mismatch]} --trimmed-only \
             -o $TMPD/{wildcards.library}.rvs_tr2.fastq -p $TMPD/{wildcards.library}.fwd_tr2.fastq \
             $TMPD/{wildcards.library}.fwd_unt.fastq $TMPD/{wildcards.library}.rvs_unt.fastq >> {log} 2>&1

            {config[dada_bin]}/cutadapt -a $RVS_RC -A $FWD_RC \
             --no-indels -n {config[primer_cutting][count]} \
              -m 1:1 \
             -j {threads} -e {config[primer_cutting][perc_mismatch]} \
             -o $TMPD/{wildcards.library}.fwd.final.fastq -p $TMPD/{wildcards.library}.rvs.final.fastq \
             $TMPD/{wildcards.library}.rvs_tr2.fastq $TMPD/{wildcards.library}.fwd_tr2.fastq >> {log} 2>&1

            cat $TMPD/{wildcards.library}.fwd.final.fastq >> {output[0]}
            cat $TMPD/{wildcards.library}.rvs.final.fastq >> {output[1]}
            """



